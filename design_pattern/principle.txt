设计模式六大原则

1、单一职责原则（Single Responsibility Principle）
	不要存在多于一个导致类变更的原因。通俗地说，即一个类只负责一项职责。

2、里氏替换原则（Liskov Substitution Principle）
	所有引用基类的地方必须能透明地使用其子类的对象。
	通俗地将就是：子类可以扩展父类的功能，但不能改变父类原有的功能。包含4层含义：
		* 子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。
		* 子类中可以增加自己特有的方法。
		* 当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类的方法输入参数更宽松。
		* 当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。

3、依赖倒置原则（Dependence Inversion Principle）
	高层模块不应该依赖底层模块，二者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。
	依赖倒置原则的中心思想：面向接口编程。

4、接口隔离原则（Interface Segregation Principle）
	客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。

5、迪米特法则（Law Of Demeter）
	一个对象应该对其他对象保持最少的了解。
	只与直接的朋友通信。（出现在成员变量、方法参数、方法返回值中的类为直接的朋友）

6、开闭原则（Open Close Principle）
	一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。
